A Doubly Linked List (DLL) contains an extra pointer, typically called previous pointer, together with next pointer and data 
which are there in singly linked list.

*** Advantages over singly linked list
1) A DLL can be traversed in both forward and backward direction.
2) The delete operation in DLL is more efficient if pointer to the node to be deleted is given.
3) We can quickly insert a new node before a given node.
In singly linked list, to delete a node, pointer to the previous node is needed.
To get this previous node, sometimes the list is traversed. In DLL, we can get the previous node using previous pointer.

*** Disadvantages over singly linked list
1) Every node of DLL Require extra space for an previous pointer. It is possible to implement DLL with single pointer though.
2) All operations require an extra pointer previous to be maintained. For example, in insertion, we need to modify previous 
pointers together with next pointers. For example in following functions for insertions at different positions, we need 1 or 
2 extra steps to set previous pointer.


Insertion
A node can be added in four ways
1) At the front of the DLL (A 5 steps process) - 4 the same as the Singly Linked Lists.
2) After a given node. - (A 7 steps process)
3) At the end of the DLL - (7 steps process)
4) Before a given node. -
Let the pointer to this given node be next_node and the data of the new node to be added as new_data.

Check if the next_node is NULL or not. If itâ€™s NULL, return from the function because any new node can not be added before a NULL
Allocate memory for the new node, let it be called new_node
Set new_node->data = new_data
Set the previous pointer of this new_node as the previous node of the next_node, new_node->prev = next_node->prev
Set the previous pointer of the next_node as the new_node, next_node->prev = new_node
Set the next pointer of this new_node as the next_node, new_node->next = next_node;
If the previous node of the new_node is not NULL, then set the next pointer of this previous node as 
new_node, new_node->prev->next = new_node
Else, if the prev of new_node is NULL, it will be the new head node. So, make (*head_ref) = new_node.
