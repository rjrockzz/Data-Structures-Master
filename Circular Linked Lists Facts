*** NO NULL CONCEPT

Advantages of Circular Linked Lists:
1) Any node can be a starting point. We can traverse the whole list by starting from any point. 
We just need to stop when the first visited node is visited again.

2) Useful for implementation of queue. Unlike this implementation, we don’t need to maintain 
two pointers for front and rear if we use circular linked list. We can maintain a pointer to
the last inserted node and front can always be obtained as next of last.

3) Circular lists are useful in applications to repeatedly go around the list. For example,
when multiple applications are running on a PC, it is common for the operating system to put
the running applications on a list and then to cycle through them, giving each of them a slice 
of time to execute, and then making them wait while the CPU is given to another application. 
It is convenient for the operating system to use a circular list so that when it reaches the end 
of the list it can cycle around to the front of the list.

4) Circular Doubly Linked Lists are used for implementation of advanced data structures like Fibonacci Heap.

***Why Circular?

In a singly linked list, for accessing any node of linked list, we start traversing from the
first node. If we are at any node in the middle of the list, then it is not possible to access nodes that precede 
the given node. This problem can be solved by slightly altering the structure of singly linked list. In a singly
linked list, next part (pointer to next node) is NULL, if we utilize this link to point to the first node then
we can reach preceding nodes. Refer this for more advantages of circular linked lists.

*** Why have we taken a pointer that points to the last node instead of first node ?

For insertion of node in the beginning we need traverse the whole list. Also,
for insertion and the end, the whole list has to be traversed. If instead of start pointer
we take a pointer to the last node then in both the cases there won’t be any need to traverse
the whole list. So insertion in the begging or at the end takes constant time irrespective of the length of the list.

Insertion
A node can be added in three ways:

Insertion in an empty list
Insertion at the beginning of the list
Insertion at the end of the list
Insertion in between the nodes

*** Deletion Algorithm

Case 1: List is empty.

If the list is empty we will simply return.

Case 2:List is not empty

- If the list is not empty then we define two pointers curr and prev and initialize the pointer curr with the head node.
- Traverse the list using curr to find the node to be deleted and before moving curr to next node, everytime set prev = curr.
- If the node is found, check if it is the only node in the list. If yes, set head = NULL and free(curr).
- If the list has more than one node, check if it is the first node of the list. Condition to check this( curr == head).
- If yes, then move prev until it reaches the last node. After prev reaches the last node, set head = head -> next and
  prev -> next = head. Delete curr.
- If curr is not first node, we check if it is the last node in the list. Condition to check this is (curr -> next == head).
- If curr is the last node. Set prev -> next = head and delete the node curr by free(curr).
- If the node to be deleted is neither the first node nor the last node, then set prev -> next = temp -> next and delete curr.
